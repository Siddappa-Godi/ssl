//1a lex
%{
	#include<stdio.h>
	#include<string.h>
	int flag=0,i=0,j,k=0;
	char o[20][20],opar[20][20];
%}

%%
[0-9]+ {flag++;strcpy(o[i],yytext);i++;}
[+*/-] {flag--;strcpy(opar[k],yytext);k++;}
. ;
%%
int yywrap()
{
	return 1;
}
int main(int argc,char *argv[])
{
	printf("Enter an arithmetic expression : \n");
	yylex();
	if(flag!=1)
		printf("Invalid Expression !!!");
	else
	{
		printf("Valid Expression!!!\n");
		printf("The operands are : ");
		for(j=0;j<i;j++)
			printf("%s ",o[j]);
		printf("\nThe operators are : ");
		for(j=0;j<k;j++)
			printf("%s ",opar[j]);
	printf("\n");
	}
}

//1b lex part

%{
	#include<stdio.h>
	#include"y.tab.h"
	extern int yylval;
%}

%%
[0-9]+ {yylval=atoi(yytext); return NUM;}
[\t] ;
\n return 0;
.	return yytext[0];
%%

int yywrap()
{
	return 1;
}


//1b yacc part

%{
	#include<stdio.h>
	#include<stdlib.h>
	int yylex(void);
	int yyerror(char *s);
%}

%token NUM 
%left '+' '-'
%left '*' '/'
%left '('')'

%%
	expr:e{printf("result : %d\n", $$); return 0;}
	e:e'+'e{$$=$1+$3;} | e'-'e{$$=$1-$3;} | e'*'e{$$=$1*$3;} | e'/'e{$$=$1/$3;} | '('e')' {$$=$2;} | NUM{$$=$1;};
%%
int main()
{
	printf("\nEnter the arithmetic expression : \n");
	yyparse();
	printf("\nValid Expression\n");
}

int yyerror(char *s)
{
	printf("\nInvalid Expression\n");
	exit(0);
}

