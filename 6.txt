//6a lex
%{
#include<stdio.h>
int nc=0;
%}

%%
"/*"[a-zA-z0-9\n\t ]*"*/" { nc++; }
"//"[a-aA-z0-9\t ]*"\n" { nc++; }
%%

int main(int argc,char* argv[])
{
	if(argc==2)
	{
		yyin=fopen(argv[1],"r");
	}
	else
	{
		printf("Enter the input\n");
		yyin=stdin;
	}
	yyout=fopen("output.c","w");
	yylex();
	printf("The number of comment lines=%d\n",nc);
	fclose(yyin);
	fclose(yyout);
}

int yywrap()
{
	return 1;
}



//6b lex

%{
	#include<stdio.h>
	#include"y.tab.h"
	extern int yylval;
%}


%%
[ \t];
[+|-|*|/|<|>] {printf("\nOperator is \t %s",yytext);return OP;}
[0-9]+ {return DIGIT;}
[int|char|bool|float|void|for|do|while|if|else|return|main] {printf("\nKeyword is \t %s",yytext); return KEY ;}
[a-zA-Z][a-zA-Z0-9]* {printf("\nIdentifier is \t %s",yytext); return ID;}
;
%%

//6b yacc
%{
		#include<stdio.h>
		#include<stdlib.h>
		int yylex();
		int yyerror();
		extern int yylex();
		extern  FILE * yyin;
		int id=0,dig=0,key=0,op=0;
%}

%token DIGIT ID KEY OP

%%
input:input DIGIT {dig++;}
|input KEY {key++;}
|input ID {id++;} 
|input OP {op++;}
|DIGIT {dig++;}
|ID {id++;}
|KEY {key++;}
|OP {op++;}
;

%%

int main(int argc,char * argv[])
{
	if(argc==2){
	yyin=fopen(argv[1],"r");
	}
	else
	{
		printf("input file not found\n");
		exit(0);
	}
	yyparse();
	printf("\nKeywords are %d\n",key);
	printf("\nDigits are %d\n",dig);
	printf("\nIdentifiers are %d\n",id);
	printf("\nOperators are %d\n",op);
}

int yyerror()
{
	printf("EEk, Parse error!");
	exit(0);
}

int yywrap()
{
	return 1;
}
	
//input.c
void main()
{
	int a;
	float b;
	fun();
}


